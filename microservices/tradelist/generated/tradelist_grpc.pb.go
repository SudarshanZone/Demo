// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: tradelist.proto

package generated

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	TradeListService_TradeListOrder_FullMethodName = "/tradelist.TradeListService/TradeListOrder"
)

// TradeListServiceClient is the client API for TradeListService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TradeListServiceClient interface {
	TradeListOrder(ctx context.Context, in *TradeListRequest, opts ...grpc.CallOption) (*TradeListResponse, error)
}

type tradeListServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTradeListServiceClient(cc grpc.ClientConnInterface) TradeListServiceClient {
	return &tradeListServiceClient{cc}
}

func (c *tradeListServiceClient) TradeListOrder(ctx context.Context, in *TradeListRequest, opts ...grpc.CallOption) (*TradeListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TradeListResponse)
	err := c.cc.Invoke(ctx, TradeListService_TradeListOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TradeListServiceServer is the server API for TradeListService service.
// All implementations must embed UnimplementedTradeListServiceServer
// for forward compatibility
type TradeListServiceServer interface {
	TradeListOrder(context.Context, *TradeListRequest) (*TradeListResponse, error)
	mustEmbedUnimplementedTradeListServiceServer()
}

// UnimplementedTradeListServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTradeListServiceServer struct {
}

func (UnimplementedTradeListServiceServer) TradeListOrder(context.Context, *TradeListRequest) (*TradeListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TradeListOrder not implemented")
}
func (UnimplementedTradeListServiceServer) mustEmbedUnimplementedTradeListServiceServer() {}

// UnsafeTradeListServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TradeListServiceServer will
// result in compilation errors.
type UnsafeTradeListServiceServer interface {
	mustEmbedUnimplementedTradeListServiceServer()
}

func RegisterTradeListServiceServer(s grpc.ServiceRegistrar, srv TradeListServiceServer) {
	s.RegisterService(&TradeListService_ServiceDesc, srv)
}

func _TradeListService_TradeListOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TradeListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeListServiceServer).TradeListOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradeListService_TradeListOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeListServiceServer).TradeListOrder(ctx, req.(*TradeListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TradeListService_ServiceDesc is the grpc.ServiceDesc for TradeListService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TradeListService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tradelist.TradeListService",
	HandlerType: (*TradeListServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TradeListOrder",
			Handler:    _TradeListService_TradeListOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tradelist.proto",
}
